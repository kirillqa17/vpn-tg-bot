import os
import telebot
from telebot import types
from dotenv import load_dotenv
from datetime import datetime
import requests
import json

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = str(os.getenv("BOT_TOKEN"))
API_URL = "https://svoivpn.duckdns.org:443/users"
STRIPE_TOKEN = "your-stripe-token"
NOWPAYMENTS_API_KEY = os.getenv("NOWPAYMENTS_API_KEY")
CRYPTO_API_URL = "https://api.nowpayments.io/v1/"

bot = telebot.TeleBot(TOKEN)
transactions = {}


def register_user_in_db(telegram_id, referral_id=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API"""
    payload = {
        "telegram_id": int(telegram_id),
        "subscription_days": 0,  # –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ = 0
        "referral_id": referral_id  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    }
    try:
        response = requests.post(API_URL, json=payload)

        if response.status_code == 200:
            return 1
        elif response.status_code == 409:
            return 2
        else:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}, {response.text}")
            return 0
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return 0


def payment_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="card"),
        types.InlineKeyboardButton("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="crypto")
    )
    markup.row(
        types.InlineKeyboardButton("‚≠êÔ∏è Telegram Stars", callback_data="stars")
    )
    return markup


def main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")
    markup.add("üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    markup.add("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ")
    markup.add("üì• –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥")
    markup.add("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    markup.add("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    return markup


@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(message.from_user.id)
    referral_id = None
    if str(message.chat.id) == '275280940':
        for i in range(10):
            bot.send_message(message.chat.id, "Âçç Âçê Âçç –°–∞–Ω–µ–∫ –¥—ã—Ä—è–≤—ã–π –Ω–æ—Å–æ–∫  Âçê Âçç Âçê\n")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) > 1:
        referral_id = int(args[1])  # –ù–∞–ø—Ä–∏–º–µ—Ä: /start 12345678
    result = register_user_in_db(user_id, referral_id)
    if result == 1:
        project_info = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *SvoiVPN*! üåç\n\n"
            "üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª—é–±–∏–º—ã–º —Å–∞–π—Ç–∞–º –∏ —Å–µ—Ä–≤–∏—Å–∞–º.\n"
            "üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Å—Ä–∞–∑—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
            "üìú –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ: üëá"
        )

        bot.send_message(message.chat.id, project_info, parse_mode="Markdown", reply_markup=main_menu())
    elif result == 0:
        bot.send_message(message.chat.id, "üö® –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    elif result == 2:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ: üëá", parse_mode="Markdown", reply_markup=main_menu())


@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
def handle_ref_info(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ *SvoiVPN* –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏!\nüéÅ –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –æ—Ñ–æ—Ä–º–∏—Ç –∏ –æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –µ–º—É –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è +7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∞ –≤–∞–º +15 –¥–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ. –ë–æ–Ω—É—Å—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
                     parse_mode="Markdown",
                     )
    bot.send_message(message.chat.id, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{get_invite_link(message.chat.id)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –ø–µ—Ä–µ—à–µ–¥—à–∏—Ö –≤–æ –í–∞—à–µ–π —Å—Å—ã–ª–∫–µ: {get_refs_amount(message.chat.id)}",                     parse_mode='HTML'
)


@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ")
def handle_get_info(message):
    cfg = get_config(message.chat.id)
    if cfg != 0:
        sub_end = get_user_info(message.chat.id)["subscription_end"]
        dt_object = datetime.fromisoformat(sub_end.replace("Z", "+03:00"))
        user_friendly_format = dt_object.strftime("%d.%m.%Y, %H:%M")

        bot.send_message(
            message.chat.id, f"üîë –í–∞—à –∫–æ–Ω—Ñ–∏–≥: {cfg}\n"
                             f"‚è≥–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {user_friendly_format}",
            parse_mode='HTML')
    else:
        bot.send_message(
            message.chat.id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏")


@bot.message_handler(func=lambda message: message.text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
def handle_trial_request(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    is_used_trial = get_user_info(message.chat.id)["is_used_trial"]
    if is_used_trial:
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞. –í—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É."
        )
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_trial"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_trial")
        )

        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å *–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥* –Ω–∞ 3 –¥–Ω—è?\n"
            "–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è!",
            parse_mode="Markdown",
            reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data in ["confirm_trial", "cancel_trial"])
def handle_trial_confirmation(call):
    if call.data == "confirm_trial":
        user_id = call.from_user.id
        success = extend_subscription(user_id, days=3)
        if success:
            if change_trial_status(user_id, True):
                bot.edit_message_text(
                    "üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 –¥–Ω—è!\n"
                    f"üîë –í–∞—à –∫–æ–Ω—Ñ–∏–≥: {get_config(user_id)}",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='HTML'
                )
            else:
                bot.edit_message_text(
                    "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
        else:
            bot.edit_message_text(
                "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
    elif call.data == "cancel_trial":
        bot.edit_message_text(
            "‚ùå –û—Ç–º–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        bot.send_message(call.message.chat.id, "üìú –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=main_menu())


def change_trial_status(telegram_id, status):
    url = f"{API_URL}/{telegram_id}/trial"
    headers = {
        "Content-Type": "application/json"
    }
    data = bool(status)
    try:
        response = requests.patch(url, data=json.dumps(data), headers=headers)
        if response.status_code == 200:
            return True
        else:
            print(f"–û—à–∏–±–∫–∞: {response.status_code}")
            print(response.text)
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        return False


def extend_subscription(telegram_id, days):
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    url = f"{API_URL}/{telegram_id}/extend"
    headers = {
        "Content-Type": "application/json"
    }
    data = int(days)
    try:
        response = requests.patch(url, data=json.dumps(data), headers=headers)
        if response.status_code == 200:
            return True
        else:
            print(f"–û—à–∏–±–∫–∞: {response.status_code}")
            print(response.text)
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


def get_user_info(telegram_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    url = f"{API_URL}/{telegram_id}/info"

    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        return None
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


def get_config(telegram_id):
    uuid = get_user_info(telegram_id)["uuid"]
    activity = get_user_info(telegram_id)["is_active"]
    if activity == 1:
        conf = f"<code>vless://{uuid}@svoivpn.duckdns.org:8443?security=tls&type=tcp#VPN</code>"
        return conf
    else:
        return 0


def get_invite_link(telegram_id):
    link = f'<code>https://t.me/svoivless_bot?start={telegram_id}</code>'
    return link

def get_refs_amount(telegram_id):
    refs = get_user_info(telegram_id)["referrals"]
    if refs == None:
        return 0
    return len(refs)

@bot.message_handler(func=lambda message: message.text == "üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")
def handle_subscription(message):
    bot.send_message(
        message.chat.id,
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_keyboard()
    )


@bot.message_handler(func=lambda message: message.text == "üì• –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥")
def handle_get_config(message):
    cfg = get_config(message.chat.id)
    if cfg != 0:
        bot.send_message(
            message.chat.id,
            f"üîë –í–∞—à –∫–æ–Ω—Ñ–∏–≥: {cfg}\n\n",
            parse_mode='HTML'
        )
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        )


@bot.message_handler(func=lambda message: message.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
def handle_instructions(message):
    bot.send_message(
        message.chat.id,
        "üìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:*\n"
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ VPN-–∫–ª–∏–µ–Ω—Ç: https://vpn-client-link.com\n"
        "2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
        "3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º! \n\n"
        "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support_bot"
    )


if __name__ == "__main__":
    bot.polling(none_stop=True)
