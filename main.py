import os
import telebot
from telebot import types
from dotenv import load_dotenv
import requests
import uuid
from datetime import datetime

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = str(os.getenv("BOT_TOKEN"))
API_ENDPOINT = "https://your-vpn-api.com/activate"
STRIPE_TOKEN = "your-stripe-token"
NOWPAYMENTS_API_KEY = os.getenv("NOWPAYMENTS_API_KEY")
CRYPTO_API_URL = "https://api.nowpayments.io/v1/"

bot = telebot.TeleBot(TOKEN)
transactions = {}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
def payment_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="card"),
        types.InlineKeyboardButton("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="crypto")
    )
    markup.row(
        types.InlineKeyboardButton("‚≠êÔ∏è Telegram Stars", callback_data="stars")
    )
    return markup


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "üéõ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN:",
        reply_markup=payment_keyboard()
    )


@bot.callback_query_handler(func=lambda call: True)
def handle_payment_selection(call):
    if call.data == "card":
        handle_card_payment(call)
    elif call.data == "crypto":
        handle_crypto_payment(call)
    elif call.data == "stars":
        handle_telegram_stars(call)


def handle_card_payment(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üí≥ –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:\n"
             "–°—É–º–º–∞: $5.00\n"
             "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: https://your-stripe-link.com"
    )
    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Stripe API


def handle_telegram_stars(call):
    prices = [types.LabeledPrice("VPN –¥–æ—Å—Ç—É–ø", 500)]  # 500 = $5.00

    bot.send_invoice(
        chat_id=call.message.chat.id,
        title="VPN –¥–æ—Å—Ç—É–ø",
        description="–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 1 –º–µ—Å—è—Ü",
        invoice_payload="vpn-premium-month",
        provider_token=STRIPE_TOKEN,
        currency="USD",
        prices=prices,
        start_parameter="vpn-payment"
    )


@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout(pre_checkout_query):
    if pre_checkout_query.invoice_payload != "vpn-premium-month":
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False, error_message="–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞")
    else:
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


def generate_crypto_address(user_id, amount=5.0):
    headers = {"x-api-key": NOWPAYMENTS_API_KEY}
    data = {
        "price_amount": amount,
        "price_currency": "usd",
        "pay_currency": "btc",  # –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
        "ipn_callback_url": "https://your-domain.com/crypto-webhook",
        "order_id": str(uuid.uuid4()),
        "order_description": "VPN Access"
    }

    response = requests.post(f"{CRYPTO_API_URL}invoice", json=data, headers=headers)
    if response.status_code == 201:
        payment_data = response.json()
        transactions[payment_data['id']] = {
            'user_id': user_id,
            'status': 'pending',
            'created': datetime.now(),
            'amount': amount,
            'address': payment_data['pay_address']
        }
        return payment_data['pay_address'], payment_data['id']
    return None, None


@bot.message_handler(commands=['check_payment'])
def check_payment(message):
    user_id = message.from_user.id
    for payment_id, data in transactions.items():
        if data['user_id'] == user_id and data['status'] == 'pending':
            headers = {"x-api-key": NOWPAYMENTS_API_KEY}
            response = requests.get(f"{CRYPTO_API_URL}payment/{payment_id}", headers=headers)

            if response.status_code == 200:
                status = response.json()['payment_status']
                if status == 'confirmed':
                    bot.send_message(message.chat.id, "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
                    return

    bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

def handle_crypto_payment(call):
    user_id = call.from_user.id
    address, payment_id = generate_crypto_address(user_id)

    if address:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f" –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂:\n"
                 f"–°—É–º–º–∞: $5.00\n"
                 f"–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã: `{address}`\n"
                 f"ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`\n"
                 "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /check_payment",
        )
    else:
        bot.send_message(call.message.chat.id, "üö® –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞")


@bot.message_handler(content_types=['successful_payment'])
def handle_successful_payment(message):
    payment = message.successful_payment
    user = message.from_user

    data = {
        "user_id": user.id,
        "username": user.username,
        "amount": payment.total_amount,
        "currency": payment.currency,
        "payment_method": "telegram_stars"
    }

    try:
        response = requests.post(API_ENDPOINT, json=data)
        if response.status_code == 200:
            bot.send_message(message.chat.id, "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    except Exception as e:
        bot.send_message(message.chat.id, "üö® –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    bot.polling(none_stop=True)