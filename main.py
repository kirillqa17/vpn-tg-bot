import os
import telebot
from telebot import types
from dotenv import load_dotenv

from utils.api import *
from utils.keyboards import *
from utils.crypto import get_pay_link, check_payment_status, currencies, get_crypto_price

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = str(os.getenv("BOT_TOKEN"))
MONTH = int(os.getenv("1_MONTH"))
THREE_MOTHS = int(os.getenv("3_MONTH"))
YEAR = int(os.getenv("YEAR"))
CRYPTO_MONTH = float(os.getenv("CRYPTO_MONTH"))
CRYPTO_THREE_MONTHS = float(os.getenv("CRYPTO_3_MONTH"))
CRYPTO_YEAR = float(os.getenv("CRYPTO_YEAR"))
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")  # –¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

bot = telebot.TeleBot(TOKEN)
transactions = {}
invoices = {}

subscription_mapping = {
    "1 –º–µ—Å—è—Ü": 30,
    "3 –º–µ—Å—è—Ü–∞": 90,
    "1 –≥–æ–¥": 365,
}


@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(message.from_user.id)
    referral_id = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) > 1:
        referral_id = int(args[1])  # –ù–∞–ø—Ä–∏–º–µ—Ä: /start 12345678
    result = register_user_in_db(user_id, referral_id)
    if result == 1:

        project_info = (
            "üò§ –ù–∞–¥–æ–µ–ª–æ –º–µ–Ω—è—Ç—å VPN –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü? –û—á–µ—Ä–µ–¥–Ω–æ–π —Å–µ—Ä–≤–∏—Å —Å–Ω–æ–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏?\n"
            "‚ú® –î–ª—è –Ω–∞—Å ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞.\n"

            "\n\nüëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *SvoiVPN*! üåç"

            "\n\nüîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª—é–±–∏–º—ã–º —Å–∞–π—Ç–∞–º –∏ —Å–µ—Ä–≤–∏—Å–∞–º."
            "\nüí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Å—Ä–∞–∑—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É."

            "\n\nüìú –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ: üëá"
        )

        bot.send_message(message.chat.id, project_info, parse_mode="Markdown", reply_markup=main_menu())
    elif result == 0:
        bot.send_message(message.chat.id, "üö® –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    elif result == 2:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ: üëá", parse_mode="Markdown", reply_markup=main_menu())


@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
def handle_ref_info(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ *SvoiVPN* –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏!\nüéÅ –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –æ—Ñ–æ—Ä–º–∏—Ç –∏ –æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –µ–º—É –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è +7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∞ –≤–∞–º +15 –¥–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ. –ë–æ–Ω—É—Å—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
                     parse_mode="Markdown",
                     )
    bot.send_message(message.chat.id,
                     f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{get_invite_link(message.chat.id)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –ø–µ—Ä–µ—à–µ–¥—à–∏—Ö –≤–æ –í–∞—à–µ–π —Å—Å—ã–ª–∫–µ: {get_refs_amount(message.chat.id)}",
                     parse_mode='HTML'
                     )


@bot.message_handler(func=lambda message: message.text == "‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ")
def handle_get_info(message):
    cfg = get_config(message.chat.id)
    if cfg != 0:
        date = sub_end(message.chat.id)

        bot.send_message(
            message.chat.id, f"üîë –í–∞—à –∫–æ–Ω—Ñ–∏–≥: {cfg}\n"
                             f"‚è≥–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {date}",
            parse_mode='HTML')
    else:
        bot.send_message(
            message.chat.id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏")


@bot.message_handler(func=lambda message: message.text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
def handle_trial_request(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    is_used_trial = get_user_info(message.chat.id)["is_used_trial"]
    if is_used_trial:
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞. –í—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É."
        )
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_trial"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_trial")
        )

        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å *–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥* –Ω–∞ 3 –¥–Ω—è?\n"
            "–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è!",
            parse_mode="Markdown",
            reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data in ["confirm_trial", "cancel_trial"])
def handle_trial_confirmation(call):
    if call.data == "confirm_trial":
        user_id = call.from_user.id
        success = extend_subscription(user_id, days=3)
        if success:
            if change_trial_status(user_id, True):
                bot.edit_message_text(
                    "üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 –¥–Ω—è!\n"
                    f"üîë –í–∞—à –∫–æ–Ω—Ñ–∏–≥: {get_config(user_id)}",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='HTML'
                )
                send_instructions(call.message.chat.id)
            else:
                bot.edit_message_text(
                    "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
        else:
            bot.edit_message_text(
                "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
    elif call.data == "cancel_trial":
        bot.edit_message_text(
            "‚ùå –û—Ç–º–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        bot.send_message(call.message.chat.id, "üìú –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=main_menu())


@bot.message_handler(func=lambda message: message.text == "üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")
def handle_subscription(message):
    bot.send_message(
        message.chat.id,
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=subscription_duration_keyboard()
    )


@bot.callback_query_handler(func=lambda call: call.data in ["sub_1m", "sub_3m", "sub_1y"])
def handle_subscription_choice(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã"""
    subscription_mapping = {
        "sub_1m": ("1 –º–µ—Å—è—Ü", MONTH),
        "sub_3m": ("3 –º–µ—Å—è—Ü–∞", THREE_MOTHS),
        "sub_1y": ("1 –≥–æ–¥", YEAR),
    }

    chosen_plan, price = subscription_mapping[call.data]

    transactions[call.from_user.id] = {"plan": chosen_plan, "price": price}

    bot.edit_message_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ *{chosen_plan}* –∑–∞ *{price} ‚ÇΩ*.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode="Markdown",
        reply_markup=payment_keyboard()
    )


@bot.callback_query_handler(func=lambda call: call.data in ["card"])
def handle_payment(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Payments"""
    user_id = call.from_user.id

    if user_id not in transactions:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–Ω–∞—á–∞–ª–∞!", show_alert=True)
        return

    chosen_plan = transactions[user_id]["plan"]
    price = transactions[user_id]["price"]

    currency = os.getenv("CURRENCY", "RUB")

    prices = [types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {chosen_plan}",
                                 amount=price * 100)]  # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100, —Ç–∞–∫ –∫–∞–∫ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

    provider_data = {
        "receipt": {
            "items": [
                {
                    "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {chosen_plan}",
                    "quantity": "1.00",
                    "amount": {
                        "value": f"{price}",
                        "currency": currency
                    },
                    "vat_code": 1
                }
            ]
        }
    }

    bot.send_invoice(
        chat_id=call.message.chat.id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {chosen_plan}",
        description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {chosen_plan} –Ω–∞ —Å–µ—Ä–≤–∏—Å SvoiVPN.",
        invoice_payload=f"user_{user_id}_{chosen_plan}",
        provider_token=PROVIDER_TOKEN,
        currency=currency,
        prices=prices,
        start_parameter="vpn_subscription",
        is_flexible=False,
        need_email=True,
        send_email_to_provider=True,
        provider_data=json.dumps(provider_data)
    )


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout_process(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    user_id = message.from_user.id
    transaction_id = message.successful_payment.provider_payment_charge_id  # ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa

    chosen_plan = transactions[user_id]["plan"]

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    success = extend_subscription(user_id, days=subscription_mapping[chosen_plan])

    if success:
        bot.send_message(
            message.chat.id,
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {chosen_plan} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
            f"üîë –í–∞—à –∫–æ–Ω—Ñ–∏–≥:\n{get_config(user_id)}\n"
            f"üìå –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{transaction_id}</code>",
            parse_mode="HTML"
        )
        send_instructions(message.chat.id)
        handle_ref_bonus(message.chat.id)
    else:
        bot.send_message(message.chat.id, "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")



    # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transactions.pop(user_id, None)


@bot.callback_query_handler(func=lambda call: call.data == "crypto")
def handle_crypto_payment(call):
    user_id = call.from_user.id

    if user_id not in transactions:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–Ω–∞—á–∞–ª–∞!", show_alert=True)
        return

    chosen_plan = transactions[user_id]["plan"]
    currency_markup = types.InlineKeyboardMarkup()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    for currency in currencies:
        currency_markup.add(types.InlineKeyboardButton(text=currency, callback_data=f"crypto_{currency}"))

    bot.edit_message_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ *{chosen_plan}*:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode="Markdown",
        reply_markup=currency_markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("crypto_"))
def handle_currency_choice(call):
    user_id = call.from_user.id
    selected_currency = call.data.split("crypto_")[1]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É

    if user_id not in transactions:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–Ω–∞—á–∞–ª–∞!", show_alert=True)
        return

    chosen_plan = transactions[user_id]["plan"]
    price = None

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
    if chosen_plan == "1 –º–µ—Å—è—Ü":
        price = CRYPTO_MONTH
    elif chosen_plan == "3 –º–µ—Å—è—Ü–∞":
        price = CRYPTO_THREE_MONTHS
    elif chosen_plan == "1 –≥–æ–¥":
        price = CRYPTO_YEAR
    price = round(price / get_crypto_price(selected_currency), 8)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
    pay_link, invoice_id = get_pay_link(str(price), selected_currency)
    if pay_link and invoice_id:
        invoices[user_id] = invoice_id
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {price} {selected_currency}", url=pay_link))
        markup.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'check_payment_{invoice_id}'))
        bot.send_message(user_id,
                         "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ <b><i>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</i></b>",
                         reply_markup=markup, parse_mode="HTML")
    else:
        bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É.')


@bot.callback_query_handler(func=lambda call: call.data.startswith('check_payment_'))
def check_payment(call):
    chat_id = call.message.chat.id
    invoice_id = call.data.split('check_payment_')[1]
    payment_status = check_payment_status(invoice_id)
    if payment_status and payment_status.get('ok'):
        if 'items' in payment_status['result']:
            invoice = next((inv for inv in payment_status['result']['items'] if str(inv['invoice_id']) == invoice_id),
                           None)
            if invoice:
                status = invoice['status']
                if status == 'paid':
                    chosen_plan = transactions[chat_id]["plan"]

                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    success = extend_subscription(chat_id, days=subscription_mapping[chosen_plan])

                    if success:
                        bot.send_message(
                            chat_id,
                            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {chosen_plan} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
                            f"üîë –í–∞—à –∫–æ–Ω—Ñ–∏–≥:\n{get_config(chat_id)}\n",
                            parse_mode="HTML"
                        )
                        send_instructions(chat_id)
                        handle_ref_bonus(chat_id)
                    else:
                        bot.send_message(chat_id, "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

                    # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤, —É–¥–∞–ª–∏–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
                    invoices.pop(chat_id, None)
                    transactions.pop(chat_id, None)
                    bot.answer_callback_query(call.id)
                else:
                    bot.answer_callback_query(call.id, '–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞‚ùå', show_alert=True)
            else:
                bot.answer_callback_query(call.id, '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', show_alert=True)
        else:
            print(f"–û—Ç–≤–µ—Ç –æ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∞ 'items': {payment_status}")
            bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã.', show_alert=True)
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: {payment_status}")
        bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã.', show_alert=True)


@bot.message_handler(func=lambda message: message.text == "üì• –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥")
def handle_get_config(message):
    cfg = get_config(message.chat.id)
    if cfg != 0:
        bot.send_message(
            message.chat.id,
            f"üîë –í–∞—à –∫–æ–Ω—Ñ–∏–≥: {cfg}\n\n",
            parse_mode='HTML'
        )
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        )


@bot.message_handler(func=lambda message: message.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
def handle_instructions(message):
    send_instructions(message.chat.id)


def send_instructions(user_id):
    bot.send_message(
        user_id,
        "‚ùì –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @TECH_SUPPORT_LINK\n\n"
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –¥–ª—è –í–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã:",
        reply_markup=instructions_keyboard()
    )

def handle_ref_bonus(telegram_id):
    ref_id = get_user_info(telegram_id)["referral_id"]
    if ref_id:
        ref_bonus = get_user_info(telegram_id)["is_used_ref_bonus"]
        if ref_bonus == False:
            days_for_paid = 7
            days_for_ref = 15
            extend = extend_subscription(telegram_id, days=days_for_paid)
            if extend:
                change_ref_bonus_status(telegram_id, True)
                date_paid = sub_end(telegram_id)
                bot.send_message(
                    telegram_id,
                    f"üéÅ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ - –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å <b>{days_for_paid} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏</b> –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
                    f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {date_paid}",
                    parse_mode='HTML'
                )
            else:
                bot.send_message(
                    telegram_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂—É."
                )
            extend_ref = extend_subscription(ref_id, days=days_for_ref)
            if extend_ref:
                date_ref = sub_end(ref_id)
                bot.send_message(
                    ref_id,
                    f"üéÅ –ü–æ –í–∞—à–µ–π —Å—Å—ã–ª–∫–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å <b>{days_for_ref} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏</b> –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
                    f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {date_ref}",
                    parse_mode='HTML'
                )
            else:
                bot.send_message(
                    telegram_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –∑–∞ {telegram_id}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂—É."
                )

if __name__ == "__main__":
    bot.remove_webhook()
    bot.polling(none_stop=True)
